{"version":3,"sources":["components/Validation.js","App.js","reportWebVitals.js","index.js"],"names":["regForEmail","RegExp","regForName","regForPassword","Validation","props","handler","event","target","name","value","errors","state","email","test","password","toUpperCase","includes","data","flag","flag2","length","console","log","parseInt","loop","NaN","setState","formSubmit","preventDefault","validate","alert","valid","Object","values","forEach","val","this","onSubmit","type","id","onChange","style","color","Component","App","document","body","zoom","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4PAEMA,EAAcC,OAAO,0JACrBC,EAAaD,OAAO,oDACpBE,EAAiB,IAAIF,OAAO,+DAgHnBG,EA9Gf,kDAEI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVC,QAAU,SAACC,GACP,MAAsBA,EAAMC,OAArBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MACTC,EAAS,EAAKC,MAAMD,OAExB,OAAOF,GACH,IAAK,QACDE,EAAOE,MAAQb,EAAYc,KAAKJ,GAAS,GAAK,qBAC9C,MACJ,IAAK,WAUD,GATAC,EAAOI,SAAWZ,EAAeW,KAAKJ,GAAS,GAC/C,4CAGAC,EAAOI,SAAYL,EAAMM,cAAcC,SAAS,EAAKL,MAAMH,KAAKO,eAChE,sCACE,GAGqB,KAApBL,EAAOI,SAAiB,CACvB,IAAIG,EAAO,EAAKN,MAAMG,SAClBI,GAAO,EACPC,GAAQ,EACZ,GAAY,OAATF,GAAiBA,EAAKG,QAAU,EAAG,CAClCC,QAAQC,IAAIC,SAASN,EAAK,KAC1B,IAAI,IAAIO,EAAO,EAAGA,EAAQP,EAAKG,OAAS,EAAII,IACxCH,QAAQC,IAAIL,EAAKO,IACCC,MAAfR,EAAKO,MACLN,EAAQK,SAASN,EAAKO,MAAWD,SAASN,EAAKO,EAAO,GAAK,MAIvDL,EAASI,SAASN,EAAKO,EAAO,MAAQD,SAASN,EAAKO,EAAO,GAAK,IAIpEd,EAAOI,SAAaI,GAAQC,EAAU,+CAAiD,KAOtG,MACJ,IAAK,OACDT,EAAOF,KAAOP,EAAWY,KAAKJ,GAAS,GAAK,oBACzB,KAAhBC,EAAOF,MACN,EAAKkB,SAAS,CAAClB,KAAMC,IAQjC,EAAKiB,SAAL,aAAehB,UAAQF,EAAOC,IAAQ,gBApEvB,EAyEnBkB,WAAa,SAACrB,GACVA,EAAMsB,iBACH,EAAKC,SAAS,EAAKlB,MAAMD,SACxBoB,MAAM,cACNT,QAAQC,IAAI,EAAKX,MAAMH,MACvBa,QAAQC,IAAI,EAAKX,MAAMC,OACvBS,QAAQC,IAAI,EAAKX,MAAMG,WACpBgB,MAAM,iBAhFE,EAmFnBD,SAAW,SAACnB,GACR,IAAIqB,GAAQ,EAEZ,OADAC,OAAOC,OAAOvB,GAAQwB,SAAQ,SAACC,GAAD,OAASA,EAAIf,OAAS,IAAMW,GAAQ,MAC3DA,GApFP,EAAKpB,MAAQ,CACTC,MAAO,KACPE,SAAU,KACVN,KAAM,KACNE,OAAQ,CACJE,MAAM,GACNE,SAAS,GACTN,KAAK,KATE,EAFvB,0CA2FI,WACI,IAAOE,EAAU0B,KAAKzB,MAAfD,OACP,OACI,gCACI,4CACA,uBAAM2B,SAAUD,KAAKT,WAArB,mBACU,uBAAOW,KAAK,OAAO9B,KAAK,OAAO+B,GAAG,OAAOC,SAAUJ,KAAK/B,UAAU,uBAD5E,IACmFK,EAAOF,KAAKY,OAAO,GAClG,sBAAMqB,MAAO,CAACC,MAAM,WAApB,SAAiChC,EAAOF,OAAa,uBAFzD,UAGW,uBAAO8B,KAAK,OAAO9B,KAAK,QAAQ+B,GAAG,QAAQC,SAAUJ,KAAK/B,UAAU,uBAH/E,IAGsFK,EAAOE,MAAMQ,OAAO,GACtG,sBAAMqB,MAAO,CAACC,MAAM,UAApB,SAAgChC,EAAOE,QAAc,uBAJzD,iBAKoB,uBAAO0B,KAAK,WAAW9B,KAAK,WAAW+B,GAAG,WAAWC,SAAUJ,KAAK/B,UAAU,uBALlG,IAKyGK,EAAOI,SAASM,OAAO,GAC5H,sBAAMqB,MAAO,CAACC,MAAM,UAApB,SAAgChC,EAAOI,WAAiB,uBACxD,uBAAOwB,KAAK,SAAS7B,MAAM,SAAS8B,GAAG,qBAvG3D,GAAgCI,aCQjBC,MAVf,WAEE,OADAC,SAASC,KAAKL,MAAMM,KAAO,OAEzB,qBAAKC,UAAU,MAAf,SAEE,cAAC,EAAD,OCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,SAM1BZ,M","file":"static/js/main.d69dab7e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst regForEmail = RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\nconst regForName = RegExp(/^[A-Za-z][A-Za-z\\'\\-]+([\\ A-Za-z][A-Za-z\\'\\-]+)*/);\r\nconst regForPassword = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})\");\r\n\r\nexport class Validation extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: null,\r\n            password: null,\r\n            name: null,\r\n            errors: {\r\n                email:'',\r\n                password:'',\r\n                name:''\r\n            }\r\n        };\r\n    }\r\n\r\n    handler = (event) => {\r\n        const {name, value} = event.target;\r\n        let errors = this.state.errors;\r\n\r\n        switch(name) {\r\n            case 'email':\r\n                errors.email = regForEmail.test(value) ? '' : 'email is not valid';\r\n                break;\r\n            case 'password':\r\n                errors.password = regForPassword.test(value) ? '' : \r\n                'password must follow the specified format';\r\n\r\n                //Logic for firstname || lastname\r\n                errors.password = (value.toUpperCase().includes(this.state.name.toUpperCase()) ? \r\n                'password must not contain your name'\r\n                : '');\r\n\r\n                //logic for 3 sequential characters\r\n                if(errors.password === \"\") {\r\n                    let data = this.state.password;\r\n                    let flag = false;\r\n                    let flag2 = false;\r\n                    if(data !== null && data.length >= 8) {\r\n                        console.log(parseInt(data[0]));\r\n                        for(let loop = 0; loop < (data.length - 2); loop++) {\r\n                            console.log(data[loop]);\r\n                            if(data[loop] !== NaN) {\r\n                               flag = (parseInt(data[loop]) === parseInt(data[loop + 1] - 1)) ? \r\n                               true : false;\r\n\r\n                               if(flag) {\r\n                                   flag2 = (parseInt(data[loop + 1]) === parseInt(data[loop + 2] - 1)) ? \r\n                                   true : false;\r\n                               }\r\n\r\n                               errors.password = ((flag && flag2)) ? \"password must not contain sequential numbers\" : \"\"; \r\n                            } else {\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 'name':\r\n                errors.name = regForName.test(value) ? '' : 'name is not valid';\r\n                if(errors.name === \"\") {\r\n                    this.setState({name: value});\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n\r\n        this.setState({errors,[name]: value}, () => {\r\n            // console.log(errors);\r\n        })\r\n    }\r\n\r\n    formSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(this.validate(this.state.errors)) {\r\n            alert(\"Valid Form\");\r\n            console.log(this.state.name);\r\n            console.log(this.state.email);\r\n            console.log(this.state.password);\r\n        } else alert(\"Invalid Form\");\r\n    }\r\n\r\n    validate = (errors) => {\r\n        let valid = true;\r\n        Object.values(errors).forEach((val) => val.length > 0 && (valid = false));\r\n        return valid;\r\n    }\r\n\r\n    render() {\r\n        const {errors} = this.state;\r\n        return (\r\n            <div>\r\n                <h2>Validation</h2>\r\n                <form onSubmit={this.formSubmit}>\r\n                    Name: <input type=\"text\" name=\"name\" id=\"name\" onChange={this.handler}/><br/> {errors.name.length>0 &&\r\n                    <span style={{color:'oranged'}}>{errors.name}</span>}<br/>\r\n                    Email: <input type=\"text\" name=\"email\" id=\"email\" onChange={this.handler}/><br/> {errors.email.length>0 &&\r\n                    <span style={{color:'orange'}}>{errors.email}</span>}<br/>\r\n                    Password:&nbsp; <input type=\"password\" name=\"password\" id=\"password\" onChange={this.handler}/><br/> {errors.password.length>0 && \r\n                    <span style={{color:'orange'}}>{errors.password}</span>}<br/>\r\n                    <input type=\"submit\" value=\"submit\" id=\"submit\"/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Validation;\r\n","import './App.css';\nimport Validation from './components/Validation';\n// import Products from './components/Products.js';\n\nfunction App() {\n  document.body.style.zoom = \"120%\";\n  return (\n    <div className=\"App\">\n      {/* <Products /> */}\n      <Validation />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}