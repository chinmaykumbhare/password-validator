{"version":3,"sources":["components/Password.js","components/Validation.js","App.js","reportWebVitals.js","index.js"],"names":["data","regForPassword","RegExp","nameObj","Password","props","handler","event","target","name","value","errors","state","password","test","toUpperCase","includes","flag","flag2","loop","length","NaN","parseInt","setState","email","this","type","id","onChange","style","color","Component","regForEmail","regForName","Validation","formSubmit","preventDefault","validate","alert","console","log","valid","Object","values","forEach","val","onSubmit","App","document","body","zoom","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oKAMIA,E,wFAJEC,EAAiB,IAAIC,OAAO,wDAE9BC,EAAU,GA0FCC,EAtFf,kDAEI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAmBVC,QAAU,SAACC,GACP,MAAsBA,EAAMC,OAArBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MACbV,EAAOU,EAGP,IAAIC,EAAS,EAAKC,MAAMD,OAExB,GACS,aADFF,EAWC,GATAE,EAAOE,SAAWZ,EAAea,KAAKJ,GAAS,GAC/C,4CAGAC,EAAOE,SAAYH,EAAMK,cAAcC,SAASb,EAAQY,eACxD,sCACE,GAGqB,KAApBJ,EAAOE,SAAiB,CAEvB,IAAII,GAAO,EACPC,GAAQ,EACZ,GAAY,OAATlB,EACC,IAAI,IAAImB,EAAO,EAAGA,EAAQnB,EAAKoB,OAAU,EAAGD,IAOtBE,MAAfrB,EAAKmB,MACLF,EAAQK,SAAStB,EAAKmB,MAAWG,SAAStB,EAAKmB,EAAO,GAAK,MAGvDD,EAASI,SAAStB,EAAKmB,EAAO,MAAQG,SAAStB,EAAKmB,EAAO,GAAK,IAGpER,EAAOE,SAAaI,GAAQC,EAAU,+CAAiD,IAW9G,EAAKK,SAAL,aAAeZ,UAAQF,EAAOC,IAAQ,gBAlEtC,EAAKE,MAAQ,CACTY,MAAO,GACPf,KAAM,GACNI,SAAU,KACVF,OAAQ,CACJE,SAAS,KAPF,EAFvB,sDAcI,WACI,MAAsBY,KAAKpB,MAApBI,EAAP,EAAOA,KAAMe,EAAb,EAAaA,MACbrB,EAAUM,EACCe,IAjBnB,oBA2EI,WACI,IAAOb,EAAUc,KAAKb,MAAfD,OACP,OACI,iDACoB,uBAAOe,KAAK,WAAWjB,KAAK,WAAWkB,GAAG,WAAWC,SAAUH,KAAKnB,UAAU,uBADlG,IACyGK,EAAOE,SAASO,OAAO,GAC5H,sBAAMS,MAAO,CAACC,MAAM,UAApB,SAAgCnB,EAAOE,WAAiB,8BAhFxE,GAA8BkB,aCLxBC,EAAc9B,OAAO,0JACrB+B,EAAa/B,OAAO,oDA4EXgC,EA1Ef,kDAEI,WAAY7B,GAAQ,IAAD,8BACf,cAAMA,IAaVC,QAAU,SAACC,GACP,MAAsBA,EAAMC,OAArBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MACTC,EAAS,EAAKC,MAAMD,OAExB,OAAOF,GACH,IAAK,QACDE,EAAOa,MAAQQ,EAAYlB,KAAKJ,GAAS,GAAK,qBAC9C,MACJ,IAAK,OACDC,EAAOF,KAAOwB,EAAWnB,KAAKJ,GAAS,GAAK,oBACzB,KAAhBC,EAAOF,MACN,EAAKc,SAAS,CAACd,KAAMC,IAQjC,EAAKa,SAAL,aAAeZ,UAAQF,EAAOC,IAAQ,gBAjCvB,EAsCnByB,WAAa,SAAC5B,GACVA,EAAM6B,iBACH,EAAKC,SAAS,EAAKzB,MAAMD,SACxB2B,MAAM,cACNC,QAAQC,IAAI,EAAK5B,MAAMH,MACvB8B,QAAQC,IAAI,EAAK5B,MAAMY,QAEpBc,MAAM,iBA7CE,EAgDnBD,SAAW,SAAC1B,GACR,IAAI8B,GAAQ,EAEZ,OADAC,OAAOC,OAAOhC,GAAQiC,SAAQ,SAACC,GAAD,OAASA,EAAIzB,OAAS,IAAMqB,GAAQ,MAC3DA,GAjDP,EAAK7B,MAAQ,CACTY,MAAO,KAEPf,KAAM,KACNE,OAAQ,CACJa,MAAM,GAENf,KAAK,KATE,EAFvB,0CAwDI,WACI,IAAOE,EAAUc,KAAKb,MAAfD,OACP,OACI,gCACI,4CACA,uBAAMmC,SAAUrB,KAAKU,WAArB,mBACU,uBAAOT,KAAK,OAAOjB,KAAK,OAAOkB,GAAG,OAAOC,SAAUH,KAAKnB,UAAU,uBAD5E,IACmFK,EAAOF,KAAKW,OAAO,GAClG,sBAAMS,MAAO,CAACC,MAAM,WAApB,SAAiCnB,EAAOF,OAAa,uBAFzD,UAGW,uBAAOiB,KAAK,OAAOjB,KAAK,QAAQkB,GAAG,QAAQC,SAAUH,KAAKnB,UAAU,uBAH/E,IAGsFK,EAAOa,MAAMJ,OAAO,GACtG,sBAAMS,MAAO,CAACC,MAAM,UAApB,SAAgCnB,EAAOa,QAAc,uBACrD,cAAC,EAAD,CAAUA,MAAOC,KAAKb,MAAMY,MAAOf,KAAMgB,KAAKb,MAAMH,OACpD,uBAAOiB,KAAK,SAAShB,MAAM,SAASiB,GAAG,qBAnE3D,GAAgCI,aCQjBgB,MAVf,WAEE,OADAC,SAASC,KAAKpB,MAAMqB,KAAO,OAEzB,qBAAKC,UAAU,MAAf,SAEE,cAAC,EAAD,OCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,SAM1BZ,M","file":"static/js/main.9acbfda1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst regForPassword = new RegExp('^.*(?=.{8,})(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!#$%&? \"]).*$');\r\n\r\nlet nameObj = \"\";\r\nlet emailObj = \"\";\r\nlet data;\r\n\r\nexport class Password extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            name: '',\r\n            password: null,\r\n            errors: {\r\n                password:''\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const {name, email} = this.props;\r\n        nameObj = name;\r\n        emailObj = email;\r\n        //console.log(nameObj);\r\n        //console.log(emailObj);\r\n    }\r\n\r\n    handler = (event) => {\r\n        const {name, value} = event.target;\r\n        data = value;\r\n        // console.log(\"data[0]: \" +data[0]);\r\n        // console.log(data.charCodeAt(0));\r\n        let errors = this.state.errors;\r\n\r\n        switch(name) {\r\n            case 'password':\r\n                errors.password = regForPassword.test(value) ? '' : \r\n                'password must follow the specified format';\r\n\r\n                //Logic for firstname || lastname\r\n                errors.password = (value.toUpperCase().includes(nameObj.toUpperCase()) ? \r\n                'password must not contain your name'\r\n                : \"\");\r\n\r\n                //logic for 3 sequential characters\r\n                if(errors.password === \"\") {\r\n                    // let data = this.state.password;\r\n                    let flag = false;\r\n                    let flag2 = false;\r\n                    if(data !== null) {\r\n                        for(let loop = 0; loop < (data.length) - 2; loop++) {\r\n                            //logic for sequential characters\r\n                            /*\r\n                            flag = (data.charCodeAt(loop) === (data.charCodeAt(loop+1) - 1));\r\n                            flag2 = (data.charCodeAt(loop+1) === (data.charCodeAt(loop+2) - 1));\r\n                            errors.password = ((flag && flag2)) ? \"password must not contain sequential letters\" : \"\";\r\n                            */\r\n                            if(data[loop] !== NaN) {\r\n                               flag = (parseInt(data[loop]) === parseInt(data[loop + 1] - 1));\r\n\r\n                               if(flag) {\r\n                                   flag2 = (parseInt(data[loop + 1]) === parseInt(data[loop + 2] - 1));\r\n                               }\r\n\r\n                               errors.password = ((flag && flag2)) ? \"password must not contain sequential numbers\" : \"\";\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n\r\n        this.setState({errors,[name]: value}, () => {\r\n            // console.log(errors);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {errors} = this.state;\r\n        return (\r\n            <div>\r\n                Password:&nbsp; <input type=\"password\" name=\"password\" id=\"password\" onChange={this.handler}/><br/> {errors.password.length>0 && \r\n                <span style={{color:'orange'}}>{errors.password}</span>}<br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Password;\r\n","import React, { Component } from 'react'\r\nimport Password from './Password';\r\n\r\nconst regForEmail = RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\nconst regForName = RegExp(/^[A-Za-z][A-Za-z\\'\\-]+([\\ A-Za-z][A-Za-z\\'\\-]+)*/);\r\n\r\nexport class Validation extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: null,\r\n            // password: null,\r\n            name: null,\r\n            errors: {\r\n                email:'',\r\n                // password:'',\r\n                name:''\r\n            }\r\n        };\r\n    }\r\n\r\n    handler = (event) => {\r\n        const {name, value} = event.target;\r\n        let errors = this.state.errors;\r\n\r\n        switch(name) {\r\n            case 'email':\r\n                errors.email = regForEmail.test(value) ? '' : 'email is not valid';\r\n                break;\r\n            case 'name':\r\n                errors.name = regForName.test(value) ? '' : 'name is not valid';\r\n                if(errors.name === \"\") {\r\n                    this.setState({name: value});\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n\r\n        this.setState({errors,[name]: value}, () => {\r\n            // console.log(errors);\r\n        })\r\n    }\r\n\r\n    formSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(this.validate(this.state.errors)) {\r\n            alert(\"Valid Form\");\r\n            console.log(this.state.name);\r\n            console.log(this.state.email);\r\n            // console.log(this.state.password);\r\n        } else alert(\"Invalid Form\");\r\n    }\r\n\r\n    validate = (errors) => {\r\n        let valid = true;\r\n        Object.values(errors).forEach((val) => val.length > 0 && (valid = false));\r\n        return valid;\r\n    }\r\n\r\n    render() {\r\n        const {errors} = this.state;\r\n        return (\r\n            <div>\r\n                <h2>Validation</h2>\r\n                <form onSubmit={this.formSubmit}>\r\n                    Name: <input type=\"text\" name=\"name\" id=\"name\" onChange={this.handler}/><br/> {errors.name.length>0 &&\r\n                    <span style={{color:'oranged'}}>{errors.name}</span>}<br/>\r\n                    Email: <input type=\"text\" name=\"email\" id=\"email\" onChange={this.handler}/><br/> {errors.email.length>0 &&\r\n                    <span style={{color:'orange'}}>{errors.email}</span>}<br/>\r\n                    <Password email={this.state.email} name={this.state.name}/>\r\n                    <input type=\"submit\" value=\"submit\" id=\"submit\"/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Validation;\r\n","import './App.css';\nimport Validation from './components/Validation';\n// import Products from './components/Products.js';\n\nfunction App() {\n  document.body.style.zoom = \"120%\";\n  return (\n    <div className=\"App\">\n      {/* <Products /> */}\n      <Validation />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}